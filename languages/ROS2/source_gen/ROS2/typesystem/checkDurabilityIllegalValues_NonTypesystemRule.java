package ROS2.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SEnumOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SProperty;
import org.jetbrains.mps.openapi.language.SConcept;

public class checkDurabilityIllegalValues_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public checkDurabilityIllegalValues_NonTypesystemRule() {
  }
  public void applyRule(final SNode durability, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    if (SPropertyOperations.getEnum(durability, PROPS.value$XLjo).equals(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0x331f7a18c6574dd7L, 0x870742124f20f67bL, 0x7358ab7c0bd70c69L, "DDS.structure.DurabilityEnumeration"), 0x3717cb3de2d35482L, "PERSISTENT")) || SPropertyOperations.getEnum(durability, PROPS.value$XLjo).equals(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0x331f7a18c6574dd7L, 0x870742124f20f67bL, 0x7358ab7c0bd70c69L, "DDS.structure.DurabilityEnumeration"), 0x3717cb3de2d35486L, "TRANSIENT"))) {
      {
        final MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportWarning(durability, "Unsupported value of policy for ROS", "r:32754cbf-4758-422a-8eaf-16202a1e987c(ROS2.typesystem)", "7566676200134956735", null, errorTarget);
      }
    }
  }
  public SAbstractConcept getApplicableConcept() {
    return CONCEPTS.DDS_Durability$PO;
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }

  private static final class PROPS {
    /*package*/ static final SProperty value$XLjo = MetaAdapterFactory.getProperty(0x331f7a18c6574dd7L, 0x870742124f20f67bL, 0x4bc2f2a09e3862bdL, 0x4bc2f2a09e3862beL, "value");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept DDS_Durability$PO = MetaAdapterFactory.getConcept(0x331f7a18c6574dd7L, 0x870742124f20f67bL, 0x4bc2f2a09e3862bdL, "DDS.structure.DDS_Durability");
  }
}
