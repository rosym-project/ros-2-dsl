package ROS2.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.AttributeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.IAttributeDescriptor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import org.jetbrains.mps.openapi.language.SEnumerationLiteral;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SEnumOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import org.jetbrains.mps.openapi.language.SConcept;
import org.jetbrains.mps.openapi.language.SProperty;

public class checkOperationQoSCompatibility_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public checkOperationQoSCompatibility_NonTypesystemRule() {
  }
  public void applyRule(final SNode connection, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    ListSequence.fromList(SLinkOperations.getChildren(connection, LINKS.clients$oMeV)).visitAll(new IVisitor<SNode>() {
      public void visit(SNode client) {
        //  Default QoS parameters 
        SNode system_default = AttributeOperations.getAttribute(SNodeOperations.cast(ListSequence.fromList(SNodeOperations.getNodeAncestors(connection, null, false)).last(), CONCEPTS.System$7o), new IAttributeDescriptor.NodeAttribute(CONCEPTS.DefaultQoS$mx));

        SNode server_profile = SLinkOperations.getTarget(AttributeOperations.getAttribute(SLinkOperations.getTarget(connection, LINKS.server$6FU0), new IAttributeDescriptor.NodeAttribute(CONCEPTS.CapabilityProfileAnnotation$9I)), LINKS.profile$BWnM);
        SNode client_profile = SLinkOperations.getTarget(AttributeOperations.getAttribute(SLinkOperations.getTarget(client, LINKS.ref$ERZs), new IAttributeDescriptor.NodeAttribute(CONCEPTS.CapabilityProfileAnnotation$9I)), LINKS.profile$BWnM);

        String server_profile_name = ((server_profile != null) ? SPropertyOperations.getString(server_profile, PROPS.name$MnvL) : "default");
        String client_profile_name = ((client_profile != null) ? SPropertyOperations.getString(client_profile, PROPS.name$MnvL) : "default");

        // check for compatibility if the profiles are different 
        if (client_profile_name != server_profile_name) {
          // Reliability 
          SEnumerationLiteral server_reliability = ((Sequence.fromIterable(SNodeOperations.ofConcept(SLinkOperations.getChildren(server_profile, LINKS.policies$ZwmD), CONCEPTS.DDS_Reliability$EL)).last() != null) ? SPropertyOperations.getEnum(Sequence.fromIterable(SNodeOperations.ofConcept(SLinkOperations.getChildren(server_profile, LINKS.policies$ZwmD), CONCEPTS.DDS_Reliability$EL)).last(), PROPS.value$HFLS) : SPropertyOperations.getEnum(system_default, PROPS.reliability$KGFA));
          SEnumerationLiteral client_reliability = ((Sequence.fromIterable(SNodeOperations.ofConcept(SLinkOperations.getChildren(client_profile, LINKS.policies$ZwmD), CONCEPTS.DDS_Reliability$EL)).last() != null) ? SPropertyOperations.getEnum(Sequence.fromIterable(SNodeOperations.ofConcept(SLinkOperations.getChildren(client_profile, LINKS.policies$ZwmD), CONCEPTS.DDS_Reliability$EL)).last(), PROPS.value$HFLS) : SPropertyOperations.getEnum(system_default, PROPS.reliability$KGFA));
          // if server is BEST_EFFORT and client is RELIABLE then policies are incompatible 
          if (server_reliability.equals(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0x331f7a18c6574dd7L, 0x870742124f20f67bL, 0x7358ab7c0bd70c5eL, "DDS.structure.ReliabilityEnumeration"), 0x7358ab7c0bd70c60L, "BEST_EFFORT")) && client_reliability.equals(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0x331f7a18c6574dd7L, 0x870742124f20f67bL, 0x7358ab7c0bd70c5eL, "DDS.structure.ReliabilityEnumeration"), 0x7358ab7c0bd70c5fL, "RELIABLE"))) {
            {
              final MessageTarget errorTarget = new NodeMessageTarget();
              IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(connection, "The profiles " + server_profile_name + " and " + client_profile_name + " are incompatible due to reliability policy.", "r:32754cbf-4758-422a-8eaf-16202a1e987c(ROS2.typesystem)", "4109999975911292472", null, errorTarget);
            }
          }
          // Durability 
          SEnumerationLiteral server_durability = ((Sequence.fromIterable(SNodeOperations.ofConcept(SLinkOperations.getChildren(server_profile, LINKS.policies$ZwmD), CONCEPTS.DDS_Durability$PO)).last() != null) ? SPropertyOperations.getEnum(Sequence.fromIterable(SNodeOperations.ofConcept(SLinkOperations.getChildren(server_profile, LINKS.policies$ZwmD), CONCEPTS.DDS_Durability$PO)).last(), PROPS.value$XLjo) : SPropertyOperations.getEnum(system_default, PROPS.durability$KNg2));
          SEnumerationLiteral client_durability = ((Sequence.fromIterable(SNodeOperations.ofConcept(SLinkOperations.getChildren(client_profile, LINKS.policies$ZwmD), CONCEPTS.DDS_Durability$PO)).last() != null) ? SPropertyOperations.getEnum(Sequence.fromIterable(SNodeOperations.ofConcept(SLinkOperations.getChildren(client_profile, LINKS.policies$ZwmD), CONCEPTS.DDS_Durability$PO)).last(), PROPS.value$XLjo) : SPropertyOperations.getEnum(system_default, PROPS.durability$KNg2));
          // If server is VOLATILE and client is TRANSIENT_LOCAL then policies are incompatible 
          if (server_durability.equals(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0x331f7a18c6574dd7L, 0x870742124f20f67bL, 0x7358ab7c0bd70c69L, "DDS.structure.DurabilityEnumeration"), 0x7358ab7c0bd70c6bL, "VOLATILE")) && client_durability.equals(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0x331f7a18c6574dd7L, 0x870742124f20f67bL, 0x7358ab7c0bd70c69L, "DDS.structure.DurabilityEnumeration"), 0x7358ab7c0bd70c6aL, "TRANSIENT_LOCAL"))) {
            {
              final MessageTarget errorTarget = new NodeMessageTarget();
              IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(connection, "The profiles " + server_profile_name + " and " + client_profile_name + " are incompatible due to durability policy.", "r:32754cbf-4758-422a-8eaf-16202a1e987c(ROS2.typesystem)", "4109999975911292570", null, errorTarget);
            }
          }
          // Liveliness 
          SEnumerationLiteral server_liveliness = ((Sequence.fromIterable(SNodeOperations.ofConcept(SLinkOperations.getChildren(server_profile, LINKS.policies$ZwmD), CONCEPTS.DDS_Liveliness$PN)).last() != null) ? SPropertyOperations.getEnum(Sequence.fromIterable(SNodeOperations.ofConcept(SLinkOperations.getChildren(server_profile, LINKS.policies$ZwmD), CONCEPTS.DDS_Liveliness$PN)).last(), PROPS.value$EQed) : SPropertyOperations.getEnum(system_default, PROPS.liveliness$KMjY));
          SEnumerationLiteral client_liveliness = ((Sequence.fromIterable(SNodeOperations.ofConcept(SLinkOperations.getChildren(client_profile, LINKS.policies$ZwmD), CONCEPTS.DDS_Liveliness$PN)).last() != null) ? SPropertyOperations.getEnum(Sequence.fromIterable(SNodeOperations.ofConcept(SLinkOperations.getChildren(client_profile, LINKS.policies$ZwmD), CONCEPTS.DDS_Liveliness$PN)).last(), PROPS.value$EQed) : SPropertyOperations.getEnum(system_default, PROPS.liveliness$KMjY));
          // If server is AUTOMATIC and client is MANUAL_BY_TOPIC then policies are incompatible 
          if (server_liveliness.equals(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0x331f7a18c6574dd7L, 0x870742124f20f67bL, 0x7358ab7c0bd70c6eL, "DDS.structure.LivelinessEnumeration"), 0x7358ab7c0bd70c6fL, "AUTOMATIC")) && client_liveliness.equals(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0x331f7a18c6574dd7L, 0x870742124f20f67bL, 0x7358ab7c0bd70c6eL, "DDS.structure.LivelinessEnumeration"), 0x7358ab7c0bd70c70L, "MANUAL_BY_TOPIC"))) {
            {
              final MessageTarget errorTarget = new NodeMessageTarget();
              IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(connection, "The profiles " + server_profile_name + " and " + client_profile_name + " are incompatible due to liveliness policy.", "r:32754cbf-4758-422a-8eaf-16202a1e987c(ROS2.typesystem)", "4109999975911292668", null, errorTarget);
            }
          }
          // Deadline 
          int server_deadline = ((Sequence.fromIterable(SNodeOperations.ofConcept(SLinkOperations.getChildren(server_profile, LINKS.policies$ZwmD), CONCEPTS.DDS_Deadline$a6)).last() != null) ? SPropertyOperations.getInteger(Sequence.fromIterable(SNodeOperations.ofConcept(SLinkOperations.getChildren(server_profile, LINKS.policies$ZwmD), CONCEPTS.DDS_Deadline$a6)).last(), PROPS.value$krUq) : SPropertyOperations.getInteger(system_default, PROPS.deadline$ZtXz));
          int client_deadline = ((Sequence.fromIterable(SNodeOperations.ofConcept(SLinkOperations.getChildren(client_profile, LINKS.policies$ZwmD), CONCEPTS.DDS_Deadline$a6)).last() != null) ? SPropertyOperations.getInteger(Sequence.fromIterable(SNodeOperations.ofConcept(SLinkOperations.getChildren(client_profile, LINKS.policies$ZwmD), CONCEPTS.DDS_Deadline$a6)).last(), PROPS.value$krUq) : SPropertyOperations.getInteger(system_default, PROPS.deadline$ZtXz));
          // check for two cases of incompatibility 
          if (client_deadline < server_deadline) {
            {
              final MessageTarget errorTarget = new NodeMessageTarget();
              IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(connection, "The profiles " + server_profile_name + " and " + client_profile_name + " are incompatible due to deadline policy.", "r:32754cbf-4758-422a-8eaf-16202a1e987c(ROS2.typesystem)", "4109999975911292760", null, errorTarget);
            }
          }
          // Lease Duration 
          int server_lease = ((Sequence.fromIterable(SNodeOperations.ofConcept(SLinkOperations.getChildren(server_profile, LINKS.policies$ZwmD), CONCEPTS.DDS_LeaseDuration$vx)).last() != null) ? SPropertyOperations.getInteger(Sequence.fromIterable(SNodeOperations.ofConcept(SLinkOperations.getChildren(server_profile, LINKS.policies$ZwmD), CONCEPTS.DDS_LeaseDuration$vx)).last(), PROPS.value$nA9S) : SPropertyOperations.getInteger(system_default, PROPS.lease$KUKy));
          int client_lease = ((Sequence.fromIterable(SNodeOperations.ofConcept(SLinkOperations.getChildren(client_profile, LINKS.policies$ZwmD), CONCEPTS.DDS_LeaseDuration$vx)).last() != null) ? SPropertyOperations.getInteger(Sequence.fromIterable(SNodeOperations.ofConcept(SLinkOperations.getChildren(client_profile, LINKS.policies$ZwmD), CONCEPTS.DDS_LeaseDuration$vx)).last(), PROPS.value$nA9S) : SPropertyOperations.getInteger(system_default, PROPS.lease$KUKy));
          // check for two cases of incompatibility 
          if (client_lease < server_lease) {
            {
              final MessageTarget errorTarget = new NodeMessageTarget();
              IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(connection, "The profiles " + server_profile_name + " and " + client_profile_name + " are incompatible due to lease duration policy.", "r:32754cbf-4758-422a-8eaf-16202a1e987c(ROS2.typesystem)", "4109999975911292856", null, errorTarget);
            }
          }
        }
      }
    });
  }
  public SAbstractConcept getApplicableConcept() {
    return CONCEPTS.OperationConnector$$_;
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink clients$oMeV = MetaAdapterFactory.getContainmentLink(0x73f2d64e927d48dcL, 0x89c7793f38431f94L, 0x69023be9ff802cb6L, 0x69023be9ff802cc1L, "clients");
    /*package*/ static final SReferenceLink server$6FU0 = MetaAdapterFactory.getReferenceLink(0x73f2d64e927d48dcL, 0x89c7793f38431f94L, 0x69023be9ff802cb6L, 0x69023be9ff827c95L, "server");
    /*package*/ static final SReferenceLink profile$BWnM = MetaAdapterFactory.getReferenceLink(0x73f2d64e927d48dcL, 0x89c7793f38431f94L, 0x22f0a573da97db52L, 0x31ec195a68373325L, "profile");
    /*package*/ static final SReferenceLink ref$ERZs = MetaAdapterFactory.getReferenceLink(0x73f2d64e927d48dcL, 0x89c7793f38431f94L, 0x69023be9ff8032b6L, 0x69023be9ff8032b7L, "ref");
    /*package*/ static final SContainmentLink policies$ZwmD = MetaAdapterFactory.getContainmentLink(0x6d22281353ea440eL, 0xba3023ced4b723f0L, 0x75d27ff7603f6d14L, 0x75d27ff7603f6d21L, "policies");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept System$7o = MetaAdapterFactory.getConcept(0x218e40b475d44de8L, 0x83e6b31e4da8bceeL, 0x17882579cafcccdbL, "Component.structure.System");
    /*package*/ static final SConcept DefaultQoS$mx = MetaAdapterFactory.getConcept(0x73f2d64e927d48dcL, 0x89c7793f38431f94L, 0x3717cb3de2d53f21L, "ROS2.structure.DefaultQoS");
    /*package*/ static final SConcept CapabilityProfileAnnotation$9I = MetaAdapterFactory.getConcept(0x73f2d64e927d48dcL, 0x89c7793f38431f94L, 0x22f0a573da97db52L, "ROS2.structure.CapabilityProfileAnnotation");
    /*package*/ static final SConcept DDS_Reliability$EL = MetaAdapterFactory.getConcept(0x331f7a18c6574dd7L, 0x870742124f20f67bL, 0x4bc2f2a09e3b8fe4L, "DDS.structure.DDS_Reliability");
    /*package*/ static final SConcept DDS_Durability$PO = MetaAdapterFactory.getConcept(0x331f7a18c6574dd7L, 0x870742124f20f67bL, 0x4bc2f2a09e3862bdL, "DDS.structure.DDS_Durability");
    /*package*/ static final SConcept DDS_Liveliness$PN = MetaAdapterFactory.getConcept(0x331f7a18c6574dd7L, 0x870742124f20f67bL, 0x4bc2f2a09e3b8fc1L, "DDS.structure.DDS_Liveliness");
    /*package*/ static final SConcept DDS_Deadline$a6 = MetaAdapterFactory.getConcept(0x331f7a18c6574dd7L, 0x870742124f20f67bL, 0x69023be9ff596d71L, "DDS.structure.DDS_Deadline");
    /*package*/ static final SConcept DDS_LeaseDuration$vx = MetaAdapterFactory.getConcept(0x331f7a18c6574dd7L, 0x870742124f20f67bL, 0x69023be9ff596dadL, "DDS.structure.DDS_LeaseDuration");
    /*package*/ static final SConcept OperationConnector$$_ = MetaAdapterFactory.getConcept(0x73f2d64e927d48dcL, 0x89c7793f38431f94L, 0x69023be9ff802cb6L, "ROS2.structure.OperationConnector");
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
    /*package*/ static final SProperty value$HFLS = MetaAdapterFactory.getProperty(0x331f7a18c6574dd7L, 0x870742124f20f67bL, 0x4bc2f2a09e3b8fe4L, 0x4bc2f2a09e3b8fe5L, "value");
    /*package*/ static final SProperty reliability$KGFA = MetaAdapterFactory.getProperty(0x73f2d64e927d48dcL, 0x89c7793f38431f94L, 0x3717cb3de2d53f21L, 0x3717cb3de2d53f9aL, "reliability");
    /*package*/ static final SProperty value$XLjo = MetaAdapterFactory.getProperty(0x331f7a18c6574dd7L, 0x870742124f20f67bL, 0x4bc2f2a09e3862bdL, 0x4bc2f2a09e3862beL, "value");
    /*package*/ static final SProperty durability$KNg2 = MetaAdapterFactory.getProperty(0x73f2d64e927d48dcL, 0x89c7793f38431f94L, 0x3717cb3de2d53f21L, 0x3717cb3de2d53fa1L, "durability");
    /*package*/ static final SProperty value$EQed = MetaAdapterFactory.getProperty(0x331f7a18c6574dd7L, 0x870742124f20f67bL, 0x4bc2f2a09e3b8fc1L, 0x4bc2f2a09e3b8fc2L, "value");
    /*package*/ static final SProperty liveliness$KMjY = MetaAdapterFactory.getProperty(0x73f2d64e927d48dcL, 0x89c7793f38431f94L, 0x3717cb3de2d53f21L, 0x3717cb3de2d53f9dL, "liveliness");
    /*package*/ static final SProperty value$krUq = MetaAdapterFactory.getProperty(0x331f7a18c6574dd7L, 0x870742124f20f67bL, 0x69023be9ff596d71L, 0x69023be9ff596d74L, "value");
    /*package*/ static final SProperty deadline$ZtXz = MetaAdapterFactory.getProperty(0x73f2d64e927d48dcL, 0x89c7793f38431f94L, 0x3717cb3de2d53f21L, 0x3717cb3de2d54165L, "deadline");
    /*package*/ static final SProperty value$nA9S = MetaAdapterFactory.getProperty(0x331f7a18c6574dd7L, 0x870742124f20f67bL, 0x69023be9ff596dadL, 0x69023be9ff596daeL, "value");
    /*package*/ static final SProperty lease$KUKy = MetaAdapterFactory.getProperty(0x73f2d64e927d48dcL, 0x89c7793f38431f94L, 0x3717cb3de2d53f21L, 0x3717cb3de2d53facL, "lease");
  }
}
