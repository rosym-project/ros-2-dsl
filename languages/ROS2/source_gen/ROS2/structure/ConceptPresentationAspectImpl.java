package ROS2.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_Action;
  private ConceptPresentation props_Argument;
  private ConceptPresentation props_CapabilityProfileAnnotation;
  private ConceptPresentation props_Monitor;
  private ConceptPresentation props_Namespace;
  private ConceptPresentation props_Remappings;
  private ConceptPresentation props_RequirementsProfileAnnotation;
  private ConceptPresentation props_Topic;
  private ConceptPresentation props_TopicRef;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.Action:
        if (props_Action == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Action");
          props_Action = cpb.create();
        }
        return props_Action;
      case LanguageConceptSwitch.Argument:
        if (props_Argument == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("argument remap");
          props_Argument = cpb.create();
        }
        return props_Argument;
      case LanguageConceptSwitch.CapabilityProfileAnnotation:
        if (props_CapabilityProfileAnnotation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("capability profile annotation for component");
          cpb.presentationByReference(0x73f2d64e927d48dcL, 0x89c7793f38431f94L, 0x22f0a573da97db52L, 0x31ec195a68373325L, "profile", "", "");
          props_CapabilityProfileAnnotation = cpb.create();
        }
        return props_CapabilityProfileAnnotation;
      case LanguageConceptSwitch.Monitor:
        if (props_Monitor == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Monitor");
          props_Monitor = cpb.create();
        }
        return props_Monitor;
      case LanguageConceptSwitch.Namespace:
        if (props_Namespace == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Namespace = cpb.create();
        }
        return props_Namespace;
      case LanguageConceptSwitch.Remappings:
        if (props_Remappings == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Remappings");
          props_Remappings = cpb.create();
        }
        return props_Remappings;
      case LanguageConceptSwitch.RequirementsProfileAnnotation:
        if (props_RequirementsProfileAnnotation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("requirements profile annotation for system");
          cpb.presentationByReference(0x73f2d64e927d48dcL, 0x89c7793f38431f94L, 0x31ec195a68373327L, 0x31ec195a68373328L, "requirementsProfile", "", "");
          props_RequirementsProfileAnnotation = cpb.create();
        }
        return props_RequirementsProfileAnnotation;
      case LanguageConceptSwitch.Topic:
        if (props_Topic == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Topic = cpb.create();
        }
        return props_Topic;
      case LanguageConceptSwitch.TopicRef:
        if (props_TopicRef == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("TopicRef");
          props_TopicRef = cpb.create();
        }
        return props_TopicRef;
    }
    return null;
  }
}
