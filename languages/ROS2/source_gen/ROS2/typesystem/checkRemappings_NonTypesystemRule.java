package ROS2.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SProperty;
import org.jetbrains.mps.openapi.language.SConcept;

public class checkRemappings_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public checkRemappings_NonTypesystemRule() {
  }
  public void applyRule(final SNode remappings, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    ListSequence.fromList(SLinkOperations.getChildren(remappings, LINKS.remappings$v1W_)).visitAll(new IVisitor<SNode>() {
      public void visit(SNode it) {
        if (SPropertyOperations.getString(it, PROPS.original$PnCW) == SPropertyOperations.getString(it, PROPS.remapping$Po6Y)) {
          {
            final MessageTarget errorTarget = new NodeMessageTarget();
            IErrorReporter _reporter_2309309498 = typeCheckingContext.reportWarning(it, "Remapping not need, original argument and remap are equal", "r:32754cbf-4758-422a-8eaf-16202a1e987c(ROS2.typesystem)", "3597278078448518212", null, errorTarget);
          }
        }
      }
    });
  }
  public SAbstractConcept getApplicableConcept() {
    return CONCEPTS.Remappings$bb;
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink remappings$v1W_ = MetaAdapterFactory.getContainmentLink(0x73f2d64e927d48dcL, 0x89c7793f38431f94L, 0x22f0a573da97db55L, 0x31ec195a6838a2b4L, "remappings");
  }

  private static final class PROPS {
    /*package*/ static final SProperty remapping$Po6Y = MetaAdapterFactory.getProperty(0x73f2d64e927d48dcL, 0x89c7793f38431f94L, 0x31ec195a6838a2aeL, 0x31ec195a6838a2b1L, "remapping");
    /*package*/ static final SProperty original$PnCW = MetaAdapterFactory.getProperty(0x73f2d64e927d48dcL, 0x89c7793f38431f94L, 0x31ec195a6838a2aeL, 0x31ec195a6838a2afL, "original");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept Remappings$bb = MetaAdapterFactory.getConcept(0x73f2d64e927d48dcL, 0x89c7793f38431f94L, 0x22f0a573da97db55L, "ROS2.structure.Remappings");
  }
}
